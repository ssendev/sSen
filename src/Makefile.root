### Build flags for all targets

BUILDDIR=../build

CF_ALL          = -Wall		# C Flags
#CF_ALL		+= -nostdinc -fno-builtin # uncomment if compiler includes default stdlibrarys
LF_ALL          = -Llibc	# Linker Flags
LL_ALL          = -lc		# Link Librarys
AF_ALL          =		# Assembler Flags

LOCALTARGETNAMES= # set LOCALTARGETNAMES to empty if 'make foo' should always mean srcdir/foo and not srcdir/currentdir/foo
S= # silent: S='1':no color info of the current target, S='': show name of currently precessed target

ifeq (,$(BUILDDIR))
  $(error invalid build options)
endif
$(info === Make ==$(MAKELEVEL)==$(MAKE_RESTARTS)==$(MAKECMDGOALS)===)
ifneq (,$(SRCDIR))

.SUFFIXES:
vpath %.c	$(SRCDIR)
vpath %.h	$(SRCDIR)
vpath %.asm	$(SRCDIR)
vpath Makefile	$(SRCDIR)


### Build tools
CC              = i586-elf-gcc
LD		= i586-elf-ld
AR		= i586-elf-ar
NASM		= nasm
INST		= echo INSTALLcmd
define COMP
		$(CC) -MMD $(CF_ALL) $(CF_TGT) -o $@ -c $<
		@sed 's:\(^\| \)\$(SRCDIR)/:\1:g' <$*.d >$@.d \
		 && sed 's/.*://; s/$$\|\\$$/:/;' <$@.d >>$@.d \
		 ; rm -f $*.d
endef
LINK            = $(LD) $(LF_ALL) $(LF_TGT) -o $@ $^ $(LL_TGT) $(LL_ALL)
ASSEMBLE	= $(NASM) -f elf $(AF_ALL) $(AF_TGT) -o $@ $<
ASSEMBLEBIN	= $(NASM) -f bin $(AF_ALL) $(AF_TGT) -o $@ $<
MAKEDIR		= mkdir -p $@

DOMAKEALL:=$(if $(MAKECMDGOALS),$(filter all,$(MAKECMDGOALS)),all)
.PHONY:		all
all:		targets


# General directory independent rules
%.o:		%.asm
		@test $(S) || echo -n '[01;33m$@:[0m '
		$(ASSEMBLE)

%.bin:		%.asm
		@test $(S) || echo -n '[01;33m$@:[0m '
		$(ASSEMBLEBIN)

%.o:		%.c
		@test $(S) || echo -n '[01;33m$@:[0m '
		$(COMP)

%.a:
		@test $(S) || echo -n '[01;32m$@:[0m '
		$(AR) -crs $@ $?

%:		%.o
		@test $(S) || echo -n '[01;32m$@:[0m '
		$(LINK)

%.d:		%.o
		@test $(S) || echo '[01;36m$@:[0m '
		@[ -f $*.o.d ] && { cat $*.o.d | sed -ne '1{:s;s/\\$$/\\/;Te;N;bs;:e;s|.*:|$*:|; s/\.c\|\.h/.o/g; p;}' > $*.d; }

# .d files for non targets dont need to be remade prior to compiling (they are only interesting for the next run)
%.o.d: ;

.PHONY:		clean
clean:
ifneq (,$(filter-out clean,$(MAKECMDGOALS)))
		$(error clean must be executed alone)
else
		rm -f $(CLEAN)
		$(eval CLEANDIRS:=$(wildcard $(CLEANDIR)))
		$(if $(CLEANDIRS),rmdir $(CLEANDIRS),)
endif

DOMAKEALL:=$(strip $(DOMAKEALL) $(filter install,$(MAKECMDGOALS)))
.PHONY:		install
install:	targets 
		$(error no install routine present)
		$(INST) $(TGT_BIN) -m 755 -d $(DIR_BIN)
		$(CMD_INSTBIN)
		$(INST) $(TGT_SBIN) -m 750 -d $(DIR_SBIN)
		$(CMD_INSTSBIN)
ifeq ($(wildcard $(DIR_ETC)/*),)
		$(INST) $(TGT_ETC) -m 644 -d $(DIR_ETC)
		$(CMD_INSTETC)
else
		@echo Configuration directory $(DIR_ETC) already present -- skipping
endif
		$(INST) $(TGT_LIB) -m 750 -d $(DIR_LIB)
		$(CMD_INSTLIB)

DOMAKEALL:=$(strip $(DOMAKEALL) $(if $(filter run,$(MAKECMDGOALS)),$(if $(filter-out run,$(MAKECMDGOALS)),,run),))
.PHONY:		run
run:		$(if $(DOMAKEALL),all,$(filter-out run,$(MAKECMDGOALS)))
		@rTGTS='$(if $(DOMAKEALL),$(TGT_BIN),$(filter $(filter-out run all install clean,$(MAKECMDGOALS)),$(TGT_BIN)))'; \
		if [ -n "$$rTGTS" ];then \
			set -- $$rTGTS; \
			if [ -z "$$2"  ];then \
				GO=$$1; \
			else \
				PS3='run which bin? '; \
				select bin in $$rTGTS;do \
					if [ -n "$$bin" ];then \
						GO=$$bin; \
						break; \
					else \
						echo 'invalid selection'; \
					fi; \
				done; \
			fi; \
			test $(S) || echo '[01;33mRUNNING: '$$GO'[0m ' && echo "RUNNING: $$GO" | sed 's/./-/g; s/^/[01;33m/; s/$$/[0m/'; \
			./$$GO; \
		else \
			echo 'theres nothing to run'; \
		fi


define SUBDIR_template
  sp 		:= $$(sp).x
  dirstack_$$(sp):= $$(d)
  d		:= $$(patsubst ./%,%,$$(d)$(1)/)
  #$$(info ==$$(sp)==$$(d)== )

  include	$(2)

  INCS:=$$(if $$(DOMAKEALL),$$(TGTDEPS_$$(d)),$$(filter $$(addsuffix .d,$$(MAKECMDGOALS)),$$(TGTDEPS_$$(d))))
  ifneq (,$$(INCS))
    #-include $$(DEPS_$$(d)) $$(INCS) # this line would be all thats needed but there is no silent include which causes errors, neccessitating the following construction
    -include $$(DEPS_$$(d))
    NEWINCS:=$$(filter-out $$(wildcard $$(INCS)),$$(INCS))
    ifneq (,$$(NEWINCS))
      _:=$$(shell mkdir -p ./$$(d); touch -t 197001010101 $$(NEWINCS))
    endif
    include $$(INCS)
  endif

  $$(CLEAN_$$(d)):	| $$(d)
  $$(d):
		@$$(MAKEDIR)

  CLEAN:=$$(CLEAN) $$(CLEAN_$$(d))
  CLEANDIR:=$$(CLEANDIR) $$(d)
  d		:= $$(dirstack_$$(sp))
  sp		:= $$(basename $$(sp))
endef 

DIRS	:= . # include Makefile from same directory
ifneq (,$(DIRS))
  $(foreach DIR,$(DIRS),$(eval $(call SUBDIR_template,$(DIR),$(SRCDIR)/Makefile)))
endif


# The variables TGT_*, CLEAN and CMD_INST* may be added to by the Makefile
# fragments in the various subdirectories.

.PHONY:		targets
targets:	$(TGT_BIN) $(TGT_SBIN) $(TGT_ETC) $(TGT_LIB)

# Prevent make from removing any build targets, including intermediate ones
.SECONDARY:	$(CLEAN)



else # no SRCDIR (initialization required)

.PHONY:		all $(MAKECMDGOALS)
all $(filter-out all,$(MAKECMDGOALS)) :
	@# get relative path and call make (two times if "make clean othertarget")
	@[ -n "$(DIDIT)" ] || { \
		absrootdir="$$(cd ./$(ROOTDIR); pwd)"; \
		[ "$$absrootdir" != "$(CURDIR)" $(if $(LOCALTARGETNAMES),,-a 1 -eq 2) ] && { LOCAL=$$(echo '$(CURDIR)'|cut -c $$(expr length "  $$absrootdir")-); [ -n "$$LOCAL" ] && LOCAL=$$LOCAL/;} || LOCAL=; \
		cGOAL=;aGOAL=;lGOAL=; for G in $(MAKECMDGOALS);do echo $$G|grep -qs '^\(all\|clean\|run\|install\)$$' \
			&& { echo $$G|grep -qs 'clean'&&cGOAL+="$$G "||aGOAL+="$$G ";} || lGOAL+=$$(echo "$$LOCAL$$G "|sed ':a;s|[^/]*/\.\./||;ta') ;done; \
		[ "$(BUILDDIR)" != . ] \
		&&	reversepath="$$(echo $$absrootdir | sed 's|^|\n|; :a;s|\([^\n]*\)\n\(.*\)/\(.*\)|\1/\3\n\2|;ta; s/\n$$//')" && \
			regexp="$$(echo $$reversepath | sed 's~/[^/]*~s|/:\\([^:]*\\)$$|&\\1|;  ~g')" && \
			srcdir=$$(echo $(BUILDDIR) |rev| sed 's|\(/*\)\.\.\(/*\)|\1:\2|g; s|[^/:.]\+/*|../|g' | sed "$$regexp") \
		||	srcdir=.; \
		mkdir -p ./$(ROOTDIR)/$(BUILDDIR); cd ./$(ROOTDIR)/$(BUILDDIR); cd "$$srcdir"; \
		[ "$$absrootdir" != "$$(pwd)" ] && { echo "Relative path did not match [ '$$absrootdir/''$(BUILDDIR)/''$$srcdir' is '$$(pwd)' and not '$(CURDIR)/$(ROOTDIR)' ]"; exit 2; } || { \
			[ -n "$$cGOAL" ] \
				&& { $(MAKE) --no-print-directory -C "$(BUILDDIR)" -f $$srcdir/Makefile.root SRCDIR="$$srcdir" $$cGOAL || exit $$?; }; \
			[ -z "$(MAKECMDGOALS)" -o -n "$$aGOAL$$lGOAL" ] && mkdir -p $(BUILDDIR) \
				&& { $(MAKE) --no-print-directory -C "$(BUILDDIR)" -f $$srcdir/Makefile.root SRCDIR="$$srcdir" $$lGOAL $$aGOAL || exit $$?; }; : ; \
		}; \
	}
	$(eval DIDIT=yes)
endif
# shorten debug-output
.SUFFIXES:
Makefile Makefile.root : ;
#%.c %.h %.o : ;
